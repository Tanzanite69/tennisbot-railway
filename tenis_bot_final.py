# tennis_bot_final.py ‚Äî –ì–æ—Ç–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è Telegram —Ç–µ–Ω–Ω–∏—Å-–≥—Ä—É–ø–ø—ã

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import sqlite3, asyncio, nest_asyncio 
import os


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ.get("TOKEN")
ADMIN_ID = int(os.environ.get("ADMIN_ID"))

# === –°–û–ó–î–ê–ù–ò–ï –ë–ê–ó–´ ===
conn = sqlite3.connect("tennis.db")
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS players (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    tg_id INTEGER,
    photo_file_id TEXT,
    wins INTEGER DEFAULT 0,
    losses INTEGER DEFAULT 0
);
""")
c.execute("""
CREATE TABLE IF NOT EXISTS matchday (
    id INTEGER PRIMARY KEY,
    date TEXT
);
""")
c.execute("""
CREATE TABLE IF NOT EXISTS participants (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tg_id INTEGER UNIQUE,
    name TEXT
);
""")
conn.commit()

# === –£–¢–ò–õ–ò–¢–ê ===
def reply(update, text):
    if update.message:
        return update.message.reply_text(text)
    elif update.callback_query:
        return update.callback_query.edit_message_text(text)

# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ Match Day", callback_data="matchday")],
        [InlineKeyboardButton("üéæ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä—ã", callback_data="leaderboard")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–Ω–∏—Å-–∫–ª—É–±!", reply_markup=InlineKeyboardMarkup(keyboard))

async def add_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_player <–ò–º—è> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ)")
        return
    name = " ".join(context.args)
    tg_id = update.message.from_user.id
    photo_id = None
    if update.message.reply_to_message and update.message.reply_to_message.photo:
        photo_id = update.message.reply_to_message.photo[-1].file_id
    conn = sqlite3.connect("tennis.db")
    conn.execute("INSERT INTO players (name, tg_id, photo_file_id) VALUES (?, ?, ?)", (name, tg_id, photo_id))
    conn.commit()
    await reply(update, f"‚úÖ –ò–≥—Ä–æ–∫ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile <–ò–º—è>")
        return
    name = " ".join(context.args)
    conn = sqlite3.connect("tennis.db")
    c = conn.cursor()
    c.execute("SELECT wins, losses, photo_file_id FROM players WHERE name = ?", (name,))
    row = c.fetchone()
    if not row:
        await reply(update, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    wins, losses, photo = row
    wins = wins or 0
    losses = losses or 0
    total = wins + losses
    winrate = f"{(wins / total) * 100:.1f}%" if total > 0 else "N/A"
    caption = f"üë§ {name}\n‚úÖ –ü–æ–±–µ–¥: {wins}\n‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n‚≠ê –í–∏–Ω—Ä–µ–π—Ç: {winrate}"
    if photo:
        await update.message.reply_photo(photo=photo, caption=caption)
    else:
        await reply(update, caption)

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tennis.db")
    c = conn.cursor()
    c.execute("SELECT name, COALESCE(wins, 0), COALESCE(losses, 0) FROM players ORDER BY wins DESC LIMIT 10")
    players = c.fetchall()
    msg = ["üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤:"]
    for i, (n, w, l) in enumerate(players, 1):
        total = w + l
        winrate = f"{(w / total) * 100:.1f}%" if total > 0 else "N/A"
        msg.append(f"{i}. {n} ‚Äî {w}W / {l}L ({winrate})")
    await reply(update, "\n".join(msg))

async def delete_player(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await reply(update, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤.")
        return
    if not context.args:
        await reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_player <–ò–º—è>")
        return
    name = " ".join(context.args)
    conn = sqlite3.connect("tennis.db")
    conn.execute("DELETE FROM players WHERE name = ?", (name,))
    conn.execute("DELETE FROM participants WHERE name = ?", (name,))
    conn.commit()
    await reply(update, f"üóë –ò–≥—Ä–æ–∫ '{name}' —É–¥–∞–ª—ë–Ω.")

async def matchday_set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await reply(update, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É.")
        return
    date = " ".join(context.args)
    conn = sqlite3.connect("tennis.db")
    conn.execute("DELETE FROM matchday")
    conn.execute("DELETE FROM participants")
    conn.execute("INSERT INTO matchday (id, date) VALUES (1, ?)", (date,))
    conn.commit()
    await reply(update, f"üìÖ Match Day —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {date}")

async def matchday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("tennis.db")
    c = conn.cursor()
    c.execute("SELECT date FROM matchday")
    row = c.fetchone()
    msg = f"üìÖ –°–ª–µ–¥—É—é—â–∏–π Match Day: {row[0]}" if row else "–î–∞—Ç–∞ –º–∞—Ç—á–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    c.execute("SELECT name FROM participants")
    names = [r[0] for r in c.fetchall()]
    if names:
        msg += "\nüéæ –£—á–∞—Å—Ç–Ω–∏–∫–∏: " + ", ".join(names)
    await reply(update, msg)

async def signup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    conn = sqlite3.connect("tennis.db")
    c = conn.cursor()
    c.execute("SELECT name FROM players WHERE tg_id = ?", (user.id,))
    row = c.fetchone()
    if not row:
        await reply(update, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /add_player")
        return
    name = row[0]
    try:
        conn.execute("INSERT INTO participants (tg_id, name) VALUES (?, ?)", (user.id, name))
        conn.commit()
        await reply(update, f"üéæ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ Match Day: {name}")
    except sqlite3.IntegrityError:
        await reply(update, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ Match Day.")

async def record_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await reply(update, "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
        return
    if len(context.args) != 3:
        await reply(update, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /record_game <–ò–≥—Ä–æ–∫1> <–ò–≥—Ä–æ–∫2> <–ü–æ–±–µ–¥–∏—Ç–µ–ª—å>")
        return
    p1, p2, winner = context.args
    conn = sqlite3.connect("tennis.db")
    c = conn.cursor()
    for name in (p1, p2):
        c.execute("SELECT id FROM players WHERE name = ?", (name,))
        if not c.fetchone():
            await reply(update, f"–ò–≥—Ä–æ–∫ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
    if winner not in (p1, p2):
        await reply(update, "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    loser = p2 if winner == p1 else p1
    c.execute("UPDATE players SET wins = COALESCE(wins, 0) + 1 WHERE name = ?", (winner,))
    c.execute("UPDATE players SET losses = COALESCE(losses, 0) + 1 WHERE name = ?", (loser,))
    conn.commit()
    await reply(update, f"‚úÖ –ú–∞—Ç—á –∑–∞–ø–∏—Å–∞–Ω: {winner} –ø–æ–±–µ–¥–∏–ª {loser}")

# === –ó–ê–ü–£–°–ö ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_player", add_player))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("leaderboard", leaderboard))
    app.add_handler(CommandHandler("delete_player", delete_player))
    app.add_handler(CommandHandler("matchday", matchday))
    app.add_handler(CommandHandler("matchday_set", matchday_set))
    app.add_handler(CommandHandler("record_game", record_game))
    app.add_handler(CallbackQueryHandler(button_handler))

    await app.bot.set_my_commands([
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("add_player", "–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ)"),
        BotCommand("profile", "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"),
        BotCommand("leaderboard", "–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand("delete_player", "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"),
        BotCommand("matchday", "–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –º–∞—Ç—á–∞"),
        BotCommand("matchday_set", "–ù–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—É –º–∞—Ç—á–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("record_game", "–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ (–∞–¥–º–∏–Ω)")
    ])

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data == "matchday":
        await matchday(update, context)
    elif data == "signup":
        await signup(update, context)
    elif data == "profile":
        await reply(update, "–í–≤–µ–¥–∏—Ç–µ: /profile <–ò–º—è>")
    elif data == "leaderboard":
        await leaderboard(update, context)
    await query.answer()

if __name__ == "__main__":
    import nest_asyncio
    import asyncio
    nest_asyncio.apply()
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    loop.run_until_complete(main())
